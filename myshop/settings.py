"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import json
from pathlib import Path
from decouple import config

SHOP_NAME = config('SHOP_NAME')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'daphne', # Should be listed first if using Daphne
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize', # Added for template humanization filters
    'channels', # Add channels here
    
    # Third-party apps
    'django_ckeditor_5',

    # Local apps
    'core.apps.CoreConfig',
    'accounts.apps.AccountsConfig',
    'products.apps.ProductsConfig',
    'cart_and_orders.apps.CartAndOrdersConfig',
    'reviews.apps.ReviewsConfig', # Use app label directly
    'blog.apps.BlogConfig',
    'discounts_and_campaigns.apps.DiscountsAndCampaignsConfig',
    'chat.apps.ChatConfig',
    'static_pages.apps.StaticPagesConfig',
    'dashboard.apps.DashboardConfig',
    'jalali_date',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middleware.OnlineUsersMiddleware',
    'core.middleware.ActiveUserMiddleware',
    'core.middleware.PageViewCounterMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Project-level templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages', # Add this line
            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'
# Add ASGI_APPLICATION for Channels
ASGI_APPLICATION = 'myshop.asgi.application' # Corrected path, assuming asgi.py is in myshop/ (project root)


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = json.loads(config('DATABASES'))


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'fa-ir'


TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # For collectstatic in production
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Project-level static files directory
]

# Media files (User-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' # Or your preferred path for media files

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.UserProfile'

# Authentication Backends (to include our custom one)
AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailOrPhoneBackend',    # Our custom backend
    'django.contrib.auth.backends.ModelBackend', # Default backend
]

# Login and Logout Redirect URLs
LOGIN_REDIRECT_URL = 'accounts:profile'  # Or 'core:home' or wherever you want to redirect after login
LOGOUT_REDIRECT_URL = 'accounts:login' # Or 'core:home' or a specific logout page
LOGIN_URL = 'accounts:login' # URL where users are redirected if @login_required fails

# Email Backend (for development, prints to console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For production, you would configure these with your actual email provider:
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@example.com'
# EMAIL_HOST_PASSWORD = 'your_email_password'
# DEFAULT_FROM_EMAIL = 'webmaster@myshop.com' 

# CKEditor Configuration
# CKEDITOR_UPLOAD_PATH = "uploads/" # Store uploads in MEDIA_ROOT/uploads/
# CKEDITOR_CONFIGS = {
#     'default': {
#         'toolbar': 'full', # You can customize the toolbar
#         'height': 300,
#         'width': '100%',
#     },
# }

# CKEditor 5 Configuration
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'imageUpload'],
        'language': 'fa'  # For Persian language UI
    },
    # Example of a more extended configuration (optional, use if needed)
    # 'extends': {
    #     'blockToolbar': [
    #         'paragraph', 'heading1', 'heading2', 'heading3',
    #         '|', 'bulletedList', 'numberedList', '|', 'blockQuote',
    #     ],
    #     'toolbar': {
    #         'items': [
    #             'heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
    #             'code','subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
    #             'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
    #             'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
    #             'insertTable',
    #         ],
    #         'shouldNotGroupWhenFull': True
    #     },
    #     'image': { 'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'], 'styles': ['full', 'side', 'alignLeft', 'alignRight', 'alignCenter']},
    #     'table': { 'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties' ]},
    #     'heading' : {
    #         'options': [
    #             { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
    #             { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
    #             { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
    #             { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
    #         ]
    #     },
    #     'language': 'fa'
    # }
}
CKEDITOR_5_FILE_UPLOAD_PERMISSION = "staff"  # Options: "staff", "authenticated", "any"
# To make CKEditor 5 respect the Django user language setting for the editor UI:
# CKEDITOR_5_USER_LANGUAGE = True 


# Channel Layers (for development, use in-memory)
# For production, use Redis:
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("localhost", 6379)],
#         },
#     },
# }
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}
